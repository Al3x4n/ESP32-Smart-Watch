#include "Declarations.h"
#include "TimeTracker.h"
#include "Animations.h"
#include "Window.h"
#include "SelectionWindow.h"
#include "Display.h"
#include "Button.h"
#include "Pages.h"
#include "home.h"
#include "settings.h"
#include "apps.h"
#include "Notifications.h"
#include "battery.h"


void interfaceLoop();
void activate() ;

#define SCREEN_TOUCH_ON_TIME 5000
unsigned long lastTouch = 0;

const int SleepTime = 10000; //we wake the micro-controller up after this many microseconds

RTC_DATA_ATTR int bootCount = 0;
RTC_DATA_ATTR timeval sleepTime;

void setup() {
#ifdef DEBUG
  Serial.begin(115200);
  Serial.println("bootCount = " + String(bootCount));
  Serial.flush();
#endif

  pinMode(TOUCH_INT, INPUT);

  if (esp_sleep_get_wakeup_cause() == ESP_SLEEP_WAKEUP_TIMER)
  {
    timeval timeNow, timeDiff;
    gettimeofday(&timeNow, NULL);
    timersub(&timeNow, &sleepTime, &timeDiff);
    printf("Now: %"PRIu64"ms, Duration: %"PRIu64"ms\n", (timeNow.tv_sec * (uint64_t)1000) + (timeNow.tv_usec / 1000), (timeDiff.tv_sec * (uint64_t)1000) + (timeDiff.tv_usec / 1000));
    delay(2000);
  }
  gettimeofday(&sleepTime, NULL);
  printf("Sleeping...\n");
  esp_sleep_enable_timer_wakeup(5 * 1000000);
  esp_deep_sleep_start();
}


if (digitalRead(TOUCH_INT)) {
  activate(bootCount == 0);
}

digitalWrite(LCD_LED_CTRL, LOW);
gpio_hold_en((gpio_num_t)LCD_LED_CTRL);
gpio_deep_sleep_hold_en();

esp_sleep_enable_timer_wakeup(SleepTime);
bootCount++;
esp_deep_sleep_start();

}

void loop() {

}

void activate(boolean getTime) {
  gpio_hold_dis((gpio_num_t) LCD_LED_CTRL);
  pinMode(LCD_LED_CTRL, OUTPUT);
  digitalWrite(LCD_LED_CTRL, LOW);
  pinMode(CHARGING_PIN, OUTPUT);
  pinMode(BATTERY_SENSE, OUTPUT);
  pinMode(TOUCH_INT, INPUT);
  digitalWrite(CHARGING_PIN, LOW);

  initLCD();
  SweepClear();

  if (getTime) {
    getInternetTime();
  }

  page = HOME;
  drawHome();

  digitalWrite(LCD_LED_CTRL, HIGH);

  long ActiveUntil = millis() + 10000;
  while (ActiveUntil > millis()) {
    if (digitalRead(TOUCH_INT) == HIGH) {
      ActiveUntil = millis() + 10000;
    }
    interfaceLoop();
    delay(1);
  }

}




/* things like touch interfacing and other user input go here */
void interfaceLoop() {

  if (ts.touched()) {
    struct point p = getTouchedPosition();
    tft.drawCircle(p.x, p.y, 2, 0x1D07);

    switch (page) {
      case HOME: HomeTouchHandler(p.x, p.y); break;
      case NOTIFICATIONS: NotificationsTouchHandler(p.x, p.y); break;
      case SETTINGS: SettingsTouchHandler(p.x, p.y); break;
    }
  }

  if (page == HOME) {
    drawHome();
  }

}
//
///* things like drawing the time don't need to happen often at all, so we tuck them in here
//*/
//void lowPriority() {
//  if (page == HOME) {
//    drawHome();
//  }
//}
